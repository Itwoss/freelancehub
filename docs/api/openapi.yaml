openapi: 3.0.3
info:
  title: Freelance Marketplace API
  description: A comprehensive API for managing a freelance marketplace platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@freelancehub.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://freelancehub.com/api
    description: Production server

security:
  - BearerAuth: []
  - SessionAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  minLength: 2
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
      responses:
        '200':
          description: Password reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects:
    get:
      tags:
        - Projects
      summary: Get all projects
      description: Retrieve a paginated list of projects with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: search
          in: query
          description: Search term
          schema:
            type: string
        - name: featured
          in: query
          description: Filter featured projects
          schema:
            type: boolean
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Projects
      summary: Create a new project
      description: Create a new project (requires authentication)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - price
                - category
              properties:
                title:
                  type: string
                  minLength: 1
                  example: "E-commerce Website Development"
                description:
                  type: string
                  minLength: 10
                  example: "Build a complete e-commerce website with modern technologies"
                price:
                  type: number
                  minimum: 0
                  example: 2500
                category:
                  type: string
                  example: "Web Development"
                tags:
                  type: array
                  items:
                    type: string
                  example: ["React", "Node.js", "PostgreSQL"]
                images:
                  type: array
                  items:
                    type: string
                  example: ["https://example.com/image1.jpg"]
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{id}:
    get:
      tags:
        - Projects
      summary: Get project by ID
      description: Retrieve a specific project with full details
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Projects
      summary: Update project
      description: Update a project (requires ownership or admin role)
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                images:
                  type: array
                  items:
                    type: string
                status:
                  type: string
                  enum: [ACTIVE, INACTIVE, COMPLETED]
                featured:
                  type: boolean
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Projects
      summary: Delete project
      description: Delete a project (requires ownership or admin role)
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: string
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      tags:
        - Orders
      summary: Get user orders
      description: Retrieve orders for the authenticated user
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [PENDING, PAID, COMPLETED, CANCELLED]
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Orders
      summary: Create new order
      description: Create a new order for a project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - projectId
              properties:
                projectId:
                  type: string
                  example: "proj_123"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
                  clientSecret:
                    type: string
                    description: Stripe payment intent client secret
        '400':
          description: Validation error or cannot order own project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve a specific order
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Orders
      summary: Update order
      description: Update order status (requires seller or admin role)
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PENDING, PAID, COMPLETED, CANCELLED]
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reviews:
    get:
      tags:
        - Reviews
      summary: Get project reviews
      description: Retrieve reviews for a specific project
      parameters:
        - name: projectId
          in: query
          required: true
          description: Project ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          description: Project ID is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Reviews
      summary: Create review
      description: Create a review for a completed order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - orderId
                - rating
              properties:
                orderId:
                  type: string
                  example: "order_123"
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 5
                comment:
                  type: string
                  example: "Excellent work! Highly recommended."
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Validation error or order not completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      description: Retrieve notifications for the authenticated user
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: unreadOnly
          in: query
          description: Filter unread notifications only
          schema:
            type: boolean
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Notifications
      summary: Mark notifications as read
      description: Mark specific notifications or all notifications as read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationIds:
                  type: array
                  items:
                    type: string
                  description: Array of notification IDs to mark as read
                markAllAsRead:
                  type: boolean
                  description: Mark all notifications as read
      responses:
        '200':
          description: Notifications updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks/stripe:
    post:
      tags:
        - Webhooks
      summary: Stripe webhook handler
      description: Handle Stripe webhook events for payment processing
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Stripe webhook event payload
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: boolean
        '400':
          description: Invalid signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Webhook handler failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [USER, ADMIN]
          example: "USER"
        bio:
          type: string
          example: "Experienced full-stack developer"
        skills:
          type: array
          items:
            type: string
          example: ["React", "Node.js", "TypeScript"]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.8
        totalReviews:
          type: integer
          minimum: 0
          example: 15
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
          example: "proj_123"
        title:
          type: string
          example: "E-commerce Website Development"
        description:
          type: string
          example: "Build a complete e-commerce website with modern technologies"
        price:
          type: number
          minimum: 0
          example: 2500
        category:
          type: string
          example: "Web Development"
        tags:
          type: array
          items:
            type: string
          example: ["React", "Node.js", "PostgreSQL"]
        images:
          type: array
          items:
            type: string
          example: ["https://example.com/image1.jpg"]
        status:
          type: string
          enum: [ACTIVE, INACTIVE, COMPLETED]
          example: "ACTIVE"
        featured:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/User'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        _count:
          type: object
          properties:
            orders:
              type: integer
            reviews:
              type: integer

    Order:
      type: object
      properties:
        id:
          type: string
          example: "order_123"
        status:
          type: string
          enum: [PENDING, PAID, COMPLETED, CANCELLED]
          example: "PAID"
        totalAmount:
          type: number
          minimum: 0
          example: 2500
        paymentId:
          type: string
          example: "pi_123"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        buyer:
          $ref: '#/components/schemas/User'
        project:
          $ref: '#/components/schemas/Project'
        review:
          $ref: '#/components/schemas/Review'

    Review:
      type: object
      properties:
        id:
          type: string
          example: "review_123"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        comment:
          type: string
          example: "Excellent work! Highly recommended."
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        reviewer:
          $ref: '#/components/schemas/User'
        project:
          $ref: '#/components/schemas/Project'
        order:
          $ref: '#/components/schemas/Order'

    Notification:
      type: object
      properties:
        id:
          type: string
          example: "notif_123"
        title:
          type: string
          example: "New Order Received"
        message:
          type: string
          example: "You have received a new order for 'E-commerce Website Development'"
        type:
          type: string
          enum: [ORDER_CREATED, ORDER_UPDATED, PAYMENT_RECEIVED, REVIEW_RECEIVED, PROJECT_APPROVED, PROJECT_REJECTED]
          example: "ORDER_CREATED"
        read:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          example: 1
        limit:
          type: integer
          minimum: 1
          example: 10
        total:
          type: integer
          minimum: 0
          example: 100
        pages:
          type: integer
          minimum: 0
          example: 10

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Validation error"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    SessionAuth:
      type: apiKey
      in: cookie
      name: next-auth.session-token


