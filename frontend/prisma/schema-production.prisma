// Production Prisma schema for PostgreSQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  hashedPassword String?
  role          String    @default("USER") // USER or ADMIN
  bio           String?
  rating        Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  orders        Order[]
  reviews       Review[]
  posts         Post[]
  stories       Story[]
  notifications Notification[]
  contacts      Contact[]
  messages      Message[]
  groups        Group[]
  groupMembers  GroupMember[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken  String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  budget      Float?
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  category    String
  tags        String[]
  images      String[]
  clientId    String
  freelancerId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  client     User     @relation(fields: [clientId], references: [id])
  freelancer User?    @relation(fields: [freelancerId], references: [id])
  orders     Order[]

  @@map("projects")
}

model Order {
  id        String   @id @default(cuid())
  projectId String
  clientId  String
  freelancerId String
  amount    Float
  status    String   @default("PENDING") // PENDING, PAID, COMPLETED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  client    User    @relation(fields: [clientId], references: [id])
  freelancer User   @relation(fields: [freelancerId], references: [id])

  @@map("orders")
}

model Review {
  id          String   @id @default(cuid())
  projectId   String
  clientId    String
  freelancerId String
  rating      Int      // 1-5
  comment     String?  @db.Text
  createdAt   DateTime @default(now())

  client     User     @relation(fields: [clientId], references: [id])
  freelancer User     @relation(fields: [freelancerId], references: [id])

  @@map("reviews")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  authorId  String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])

  @@map("posts")
}

model Story {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  authorId  String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])

  @@map("stories")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  type      String   // INFO, SUCCESS, WARNING, ERROR
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  status    String   @default("PENDING") // PENDING, REPLIED, CLOSED
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("contacts")
}

model Message {
  id        String   @id @default(cuid())
  groupId   String
  senderId  String
  content   String   @db.Text
  createdAt DateTime @default(now())

  group  Group @relation(fields: [groupId], references: [id])
  sender User  @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  createdBy   String
  createdAt   DateTime @default(now())

  creator User          @relation(fields: [createdBy], references: [id])
  members GroupMember[]
  messages Message[]

  @@map("groups")
}

model GroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}
